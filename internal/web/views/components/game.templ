package components

import (
	"strconv"
	"fmt"

	"github.com/Lafetz/showdown-trivia-game/internal/web/form"
	"github.com/Lafetz/showdown-trivia-game/internal/core/question"
	webentities "github.com/Lafetz/showdown-trivia-game/internal/web/entity"
)

import "github.com/Lafetz/showdown-trivia-game/internal/core/game"

//bg-white  shadow dark:border md:mt-0  xl:p-0 dark:bg-gray-800 dark:border-gray-700
templ CreateGame(form form.NewGame, catagories []question.Category) {
	<div class="w-full flex justify-center" id="create" hx-ext="response-targets">
		<div class="p-6 space-y-4 md:space-y-6 max-w-96 rounded-lg dark:border">
			<h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white text-center">
				Create New Game
			</h1>
			<form hx-POST="/create" hx-target="#create" hx-target-500="#create" hx-confirm="Create Game?" hx-target-422="#create" hx-target-401="#invalidAuth" class="space-y-4 md:space-y-6 flex flex-col justify-center">
				<div>
					<label for="category" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select an option</label>
					<select value={ form.Category } name="category" id="category" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						<option value="" disabled selected>Choose category</option>
						for _,category := range catagories {
							<option value={ fmt.Sprintf("%d", category.Id) }>{ category.Name }</option>
						}
					</select>
					<div>{ form.Errors["category"] }</div>
				</div>
				<div>
					<label for="amount" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Enter an amount:</label>
					<input type="number" name="amount" id="amount" value={ form.Amount } class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Enter amount" required/>
					<div>{ form.Errors["amount"] }</div>
				</div>
				<div>
					<label for="timer" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Enter a timer value:</label>
					<input type="number" name="timer" id="timer" value={ form.Timer } class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Enter timer value" required/>
					<div>{ form.Errors["timer"] }</div>
				</div>
				<button hx-indicator="#create-spinner" type="submit" class="shadow-md rounded bg-sky-600 py-1.5 px-4 font-bold text-white transition-colors duration-100 hover:bg-sky-800">
					<div class="flex gap-2 items-center justify-center">
						<span role="status" id="create-spinner" class="htmx-indicator">
							<svg aria-hidden="true" class="inline w-4 h-4 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"></path>
								<path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"></path>
							</svg>
						</span>
						<span class="font-semibold">Create Game</span>
					</div>
				</button>
			</form>
		</div>
	</div>
}

templ Game(wsUrl string, owner bool, id string, catagory int, timer int, amount int) {
	if owner {
		<div id="socket" hx-ws={ fmt.Sprintf(wsUrl+"/wscreate?category=%d&amount=%d&timer=%d", catagory, amount, timer) }>
			<div id="lobby" class="flex flex-col gap-3 justify-center items-center">
				@Players("", []string{""})
				<button
					id="keep"
					hx-ws="send"
					hx-vals='{
        "type": "start_game",
        "payload": "this will do for now"
    }'
					class="shadow-md rounded bg-sky-600 py-0.5 px-4 font-bold text-white transition-colors  duration-100 hover:bg-sky-800"
				>
					Start
				</button>
			</div>
		</div>
	} else {
		<div hx-ws={ wsUrl + "/wsjoin/" + id }>
			<div id="lobby" class="flex flex-col gap-3 justify-center items-center">
				@Players("", []string{""})
			</div>
		</div>
	}
}

templ Players(id string, players []string) {
	//
	<div hx-swap="outerHTML:#players" id="players" class="flex flex-col gap-1">
		<div class="font-semibold">Game ID:  { id }</div>
		<div class="font-semibold flex gap-1">
			<span>Players: </span>
			for _,player := range players {
				<span>{ player }</span>
			}
		</div>
	</div>
}

templ ActiveGames(rooms []webentities.RoomData) {
	<table class="table-fixed min-w-72 text-left border-separate border-spacing-y-1">
		<thead>
			<tr>
				<th>Game Creator</th>
				<th>Game Id</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			for _, room := range rooms {
				<tr>
					<td>{ room.Owner }</td>
					<td>{ room.Id }</td>
					<td>
						<button hx-get={ "/join/" + room.Id } hx-confirm="Join Game?" hx-swap="main" hx-target="main" hx-swap="innerHTML" class="shadow-md rounded bg-green-600 px-4 py-1 font-bold  transition-colors  duration-100 hover:bg-green-800">Join</button>
						//<button id="dialog-join-open" onclick="openJoinModal()" class="shadow-md rounded bg-green-600 px-4 font-bold  transition-colors  duration-100 hover:bg-green-800">Join</button>
						//
					</td>
				</tr>
			}
		</tbody>
	</table>
}

templ GameMessage(msg string) {
	<div id="lobby">
		<div class="flex-col  min-w-80" hx-swap-oob="outerHTML:#lobby">
			<p>
				{ msg }
			</p>
		</div>
	</div>
}

templ GameEndMessage(winners game.Winners) {
	<div id="lobby">
		<div class="flex flex-col justify-center items-center gap-5">
			<span class="text-4xl font-bold">Game has ended</span>
			<span class="text-2xl font-semibold underline">Players</span>
			<div class="flex gap-1 flex-wrap">
				for player,score :=range winners {
					<div class="flex flex-col shadow-md rounded bg-yellow-700 py-2 px-3 font-semibold">
						<div>
							<span>Username: </span>
							<span>{ fmt.Sprintf("@") }{ player }</span>
						</div>
						<div><span>Score: </span><span>{ strconv.Itoa(score) }</span></div>
					</div>
				}
			</div>
			// <span class="text-2xl font-semibold text-green-500">You Lost</span>
			<button onclick="window.location.href = '/home';" class="shadow-md rounded bg-sky-600 py-1.5 px-4 font-bold text-white transition-colors  duration-100 hover:bg-sky-800">Home</button>
		</div>
	</div>
}
